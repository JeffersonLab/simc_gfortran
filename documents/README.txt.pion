Changes from starting version (koltenuk/volmer/gaskell version of 8/98)

Note that this is being modified for use as a NucPi/Fpi SIMC.  Therefore,
the code can handle both rasters, pions in each arm, and (eventually) both
target geometries based on a few input flags.  There are several hardwired
parameters for pions (in the decay code), but none of the functionality 
necessary for (e,e'p), or (e,e'K) has been removed (as far as I know).
----------------------------------------------------------------------------

Modify parameter statements, long text lines, etc... for HP/OSF compatability.

Clean up Makefile. You no longer have to make the hms and sos seperatly.

Fix up geometry of HMS DCs, SOS hodoscopes, SOS collimator (1mm offset).

Apply x and y cuts for each hodoscope plane, and add 3/4 trigger option.

Add calorimeter cuts for trigger and/or reconstruction.Commented out by default.

Fix up some parameters in mc_hms_hut and mc_sos_hut.

Remove large quantities of code that was unused or commented out.

Input/output/ntuple files each have their own subdirectories.

Remove some lines from the *.inp (input) files.

Updated the README file (below) to reflect changes.

Total rework of the decay code (including pathlength variations).

Modify the form of the input files, remove many hardwired flags.

New pion generator.

Remove many cuts on the particles that would interfere with decay tests.

Add option for 'pudding can' target.

Many Cosmetic changes.

-------------------------------------------------------------

   Running DMK's Monte Carlo

****** SIMC setup

The values for Csoft and CERN_ROOT have to be put into the Makefile.

The input filename is given in Dbase.inp.  You change the input file by
changing this file.  Give the name (without extension) and the code looks
in the infiles directory for <filename>.inp

If the variable extra_dbase_file is set in your input file, that extra
dbase file will also be read in.  This is useful for values that
do not change for your experiment, or which only change once or twice.

I recommend deleting the directory worksim and linking it to someplace on
your work disk.  For example,
"ln -s /tmp_mnt/net/farms0/work8/e91016/koltenuk/simc worksim"

Decay is included for PIONS.  If doing_decay is set to .true., then
the hadron arm will check for pion decay.  Other particles will require
code changes, because of the hardwired energy/momentum values in the code.
Note that the decay is checked in transp.f and project.f, so both
versions of the decay code have to be changed if you want to modify decay.

****** SIMC input

I do not use Em or Pm for anything real in the kaon MC. However, the Em bin
size determines the minimum radiative photon energy.

You can use either rad_flag=0 or rad_flag=3.  

To switch to doing (e,e'p) stuff, set doing_peepi switch to 0.  
This Monte Carlo was checked during the homework assignment and produces
essentially identical results to the standard SIMC.  It will still do
hydrogen elastic calculations.  To do (e,e') change the spect_mode.  To do
phsp calculations change the phsp_mode.

When switching from hydrogen to deuterium to helium, make sure you 
change target.A (1 or 2 or 3) and 
target.mass_amu (1.007276 or 2.01355 or 3.01493).  The reaction you
are looking at determines target.Arec ( 9999 for
hydr_elast (or elastic on deuterium), 1.008665 for pion, 1.1977357 for 
lambda, 1.280255 for sigma0, 1.285500 for sigma-).  Remember target
densities/lengths also change--see sample input files for examples.
If doing helium, change using_Coulomb to 1.

****** SIMC output

In the output file .hist, central.sigcc is the average lab 
decay-corrected cross-section dsigma/domegae dEe dEk.   Multiply
central.sigcc by normfac to get your yield.

To get physics quantities everything needs to be weighted by 
Weight*normfac/(number of events you are looking at).
Normfac is in the *.hist file.  

Number of events you are looking at is normally Ncontribute from the
*.hist file, but if you modify the number of rows in paw then you use 
that number.  So if you are only looking at rows 1-10000, you would 
divide by 10000.

When looking at the ntuples, radphotE is the energy of the radiated
photon.  broadfac is a factor which is used to simulate misidentification
in the wire chambers.  Sigcc is dsigma/domegak* in the CM frame.  
Weight is the factor which you need to weight everything with.


****** IMPORTANT SIMC RECORDS AND STRUCTURES

STRUCTURE /event/
 vertex: 
   Ein - ebeam+width+coulomb-eloss
   Em - true generated Em (hardwired by nucleus for pions)
   e.E,dth,ph - generated quantities
   e.E,th,delta - calculated from above.  th is spectrometer angle+dth, NOT the true scattering angle.
   p.dth,ph - generated quantities.
   p.E,P,delta - calculated (energy conservation)
   ue.x,y,z - calculated (complete_ev) from e.th,ph
   up.x.y.z - calculated (complete_ev) from e.th,ph
   q,omega,q2 - calculated (complete_ev)
   uq.x,y,z - calculated (complete_ev)
   Pmx,Pmy,Pmz,Pm - calculated (complete_ev)
   pmpar,pmper,pmoop - calculated (complete_ev)
   Trec,W - calculated (complete_ev)
   e.th_phys
   p.th_phys
   e.z,p.z - NOT CALCULATED

   Ein - subtract egamma_used(1) in generate_rad


 orig: After generate, vertex is copied into orig.
   

 recon:
   e(p).delta,dth,ph,th,z,P,E,th_phys - recon from montecarlo
   Ein - ebeam_meas = ebeam + coulomb_ave - eloss_ave
   ue.x,y,z - complete_ev from recon
   up.x,y,z - complete_ev from recon
   q,omega,Q2 - complete_ev from recon
   uq.x,y,z - complete_ev from recon
   Pm,Pmx,Pmy,Pmz - complete_ev from recon

 ev,ev2:

STRUCTURE /event_main/
 main:
   target.x,y,z - true generated beam positions (tgt/beam size+offset+raster)
   target.coulomb - true generated coulomb energy loss.
   gen_weight -
   epsilon,theta_pq,oop_angle - calculated in complete_ev from vertex values.
			      - RECALCULATED from recon values.
   Trec_gen - copied from vertex.Trec
   SP.p.delta - montecarlo - includes eloss(3).
   SP.p.dth,ph - montecarlo - includes mult. scattering
   SP_recon.delta,dth,ph,z - from recon
   FP.p.x,dx,y,dy - from recon
   sigcc,sigcc_recon - from complete_main
   weight - from complete_main

STRUCTURE /contrib/
 contrib:

STRUCTURE /histograms/
 H:

STRUCTURE /event_central/
 central:

****** BASIC STRUCTURE OF SIMC:

* indicates subroutine call

*simulate:  
          *dbase_read:
               read .inp file, other input files
               initialize random seeds, assign flags
                    *target_init:
                         energy loss in target
                    *limits_init:
                         sets boundaries for generation, radiation
                    *results_init: (not used)
          *radc_init:
               initialize radiation flags
                    *brem_init:
                         initialize radiation flags
          *calculate_central: (not important)
                    *complete_ev:
                    *radc_init_ev:
                    *complete_main:
     calculate luminosity
     event loop
          *generate:
               calculate raster position (default sine wave)
               calculate position at target
               calculate eloss
               pick flat distribution of angles, energies
               find initial proton momentum if doing deut, helium
                    *complete_ev:
                         find 4-vectors for outgoing electron, hadron
                         find missing momentum (and energy)
                              *radc_init_ev:
                                   calculate lambdas
                                        *bremos:  
                                             calculate hard rad weight
                                        *basicrad_init_ev:
                                             calculate c's, g's
                    *generate_rad:
                         pick an arm for radiation
                              *basicrad:
                                   calculate radiated photon energy
                                   calculate basicrad weight
                         calculate radiative weight
                              *peaked_rad_weight:
                                   calculate external weight
                                        *bremos: 
                                             calculate internal weight
                         OR
                         basicrad weight*extrad_phi    
                         if necessary, call complete_ev
                         main.gen_weight
          *montecarlo:
               check if initial 4-vectors fall within loose spec cuts
                    *mc_sos: (if SOS is hadron arm)
                         transport through SOS spectrometer
                         checks collimator, apertures
                         uses sequential matrix elements 
                              *decay:
                                   checks for decay (pions)
                                   converts to new hadron (muon)
                                     with new 4-vector
                              *mc_sos_hut:
                                   transport through SOS hut
                                   checks detector limits
                                   multiple scattering
                                   decay
                                   calculates focal plane quantities
                              *mc_sos_recon:
                                   reconstructs target quantities
               check if target quantities fall within tight spec cuts
                    *mc_hms: (if HMS is electron arm)
                         same as for mc_sos, no decay checks
               check if target quantities fall within tight spec cuts
          *complete_ev: (recon mode)
          *complete_main:
                    *peepi:  
                         calculate cross section
               main.weight
          *inc: 
               increments .gen quantities
          *results_update: (not used)
          *limits_update:
               updates ranges for final report
          *results_ntu_write:
               fills ntuple
     end of event loop
     calculate genvol
     calculate normfac
     write .gen file
          *results_write: (not used)
          *report:
               writes .hist file
